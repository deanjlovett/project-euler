#include <iostream>
#include  <cstdlib>
// #include <iterator> // not needed
// #include <set>      // not needed 
using namespace std;

/**
 * @brief 

Even Fibonacci numbers
Submit

Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

on Mac OS:
g++ sum2fibs.cpp -o sum2fibs.app
chmod +x sum2fibs.app
sum2fibs.app

 * 
 */

/**
 * @brief 
 * 
 * @param argc 
 * @param argv 
 * @return int 
 */

long long sumfib(long below) {
    long long sum = 0;
    long prev2 = 1;
    long prev1 = 1;
    long fib=prev2+prev1;

    cout << endl;
    cout << "inside sumfib( long below: ";
    cout << below   << " )" << endl;
    cout << "fibs:" << endl;

    while( fib<below ) {
        if( fib%2 == 0 ) {
            sum += fib;
            cout << fib << " *** sum: " << sum << endl;
        }
        else{
            cout << fib << endl;
        }
        prev2 = prev1;
        prev1 = fib;
        fib = prev2 + prev1;
    }

    return sum;
}

int main(int argc, char** argv) {
    cout << "argc: " << argc << endl;
    for (int i=0; i<argc; ++i) {
        cout << "argv[" << i << "]: " << argv[i] << endl;
    }
    cout << endl;

    long below = 100;
    if( 2 == argc ){
        long value = atol(argv[1]);
        if( value != 0){
            below = value;
        }
    }

    long long sum = sumfib(below);

    cout << "sum: " << sum << endl;

    return 0;
}